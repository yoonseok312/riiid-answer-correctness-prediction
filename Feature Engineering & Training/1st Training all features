{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "yoon_train_with_hung_trueskill_mu_sigma.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "machine_shape": "hm"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lFna5pzBGVBc",
        "outputId": "c8003ec8-9adc-4196-93e8-d36ce4683ee1"
      },
      "source": [
        "!pip install -U pyarrow"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Collecting pyarrow\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/d7/e1/27958a70848f8f7089bff8d6ebe42519daf01f976d28b481e1bfd52c8097/pyarrow-2.0.0-cp36-cp36m-manylinux2014_x86_64.whl (17.7MB)\n",
            "\u001b[K     |████████████████████████████████| 17.7MB 350kB/s \n",
            "\u001b[?25hRequirement already satisfied, skipping upgrade: numpy>=1.14 in /usr/local/lib/python3.6/dist-packages (from pyarrow) (1.19.4)\n",
            "Installing collected packages: pyarrow\n",
            "  Found existing installation: pyarrow 0.14.1\n",
            "    Uninstalling pyarrow-0.14.1:\n",
            "      Successfully uninstalled pyarrow-0.14.1\n",
            "Successfully installed pyarrow-2.0.0\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HQR6XejAGXkP",
        "outputId": "edd1a81a-b86a-403c-aabc-6b025041a5c9"
      },
      "source": [
        "!pip3 uninstall -y lightgbm"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Uninstalling lightgbm-2.2.3:\n",
            "  Successfully uninstalled lightgbm-2.2.3\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KAfW4gUIGeOF"
      },
      "source": [
        "!apt-get install -y -qq libboost-all-dev"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Bt2ETNkoGg01",
        "outputId": "7af53063-e04a-4775-9036-23e93b807c45"
      },
      "source": [
        "!pip3 install lightgbm --install-option=--gpu --install-option=\"--opencl-include-dir=/usr/local/cuda/include/\" --install-option=\"--opencl-library=/usr/local/cuda/lib64/libOpenCL.so\" "
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/pip/_internal/commands/install.py:283: UserWarning: Disabling all use of wheels due to the use of --build-options / --global-options / --install-options.\n",
            "  cmdoptions.check_install_build_global(options)\n",
            "Collecting lightgbm\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/cf/65/368931f1f234149e14fc6075dbeb1ad8a8aebb105aa11fe8631c72c1bdcf/lightgbm-3.1.1.tar.gz (588kB)\n",
            "\u001b[K     |████████████████████████████████| 593kB 7.9MB/s \n",
            "\u001b[?25hRequirement already satisfied: wheel in /usr/local/lib/python3.6/dist-packages (from lightgbm) (0.36.2)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.6/dist-packages (from lightgbm) (1.19.4)\n",
            "Requirement already satisfied: scipy in /usr/local/lib/python3.6/dist-packages (from lightgbm) (1.4.1)\n",
            "Requirement already satisfied: scikit-learn!=0.22.0 in /usr/local/lib/python3.6/dist-packages (from lightgbm) (0.22.2.post1)\n",
            "Requirement already satisfied: joblib>=0.11 in /usr/local/lib/python3.6/dist-packages (from scikit-learn!=0.22.0->lightgbm) (1.0.0)\n",
            "Skipping wheel build for lightgbm, due to binaries being disabled for it.\n",
            "Installing collected packages: lightgbm\n",
            "    Running setup.py install for lightgbm ... \u001b[?25l\u001b[?25hdone\n",
            "Successfully installed lightgbm-3.1.1\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UdXn_azpGhWw"
      },
      "source": [
        "import os\n",
        "import sys\n",
        "import time\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from tqdm.notebook import tqdm\n",
        "import matplotlib.pyplot as plt\n",
        "import gc\n",
        "import random\n",
        "from pickle import dump, load\n",
        "\n",
        "pd.options.mode.chained_assignment = None"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FkocNSNrGjdB"
      },
      "source": [
        "import lightgbm as lgb"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HSFRaz2mGnNG"
      },
      "source": [
        "def read_csv(file_name = \"train.csv\", dtype = None, skiprows = None, nrows = None, usecols = None):\n",
        "    data = pd.read_csv(file_name, dtype=dtype, skiprows = skiprows, nrows = nrows, low_memory = True, header = 0, usecols = usecols)\n",
        "    return data\n",
        "\n",
        "def read_feather(file_name = \"train.feather\"):\n",
        "    data = pd.read_feather(file_name)\n",
        "    return data"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0BV6oT_EGoi3"
      },
      "source": [
        "tdf = read_feather(\"/content/drive/MyDrive/data/tdf_with_mean_trueskill_sigma_mu_hung.feather\")\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_EywjdFnHItl"
      },
      "source": [
        "vdf = read_feather(\"/content/drive/MyDrive/data/vdf_with_mean_trueskill_sigma_mu_hung.feather\")"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BHT88sj6HKU7"
      },
      "source": [
        "TARGET = 'answered_correctly'\n",
        "drop_cols = ['row_id', 'user_id', 'content_id', 'bundle_id', 'answered_correctly']\n",
        "cat_cols = ['prior_question_had_explanation', 'part', 't1', 'num_tag', 'prev_cor', 'prev_t1']"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "P1G1EV-ZHLjw",
        "outputId": "7ace95a0-3592-44a9-c9dc-89fd47f4829a"
      },
      "source": [
        "y_train = tdf[TARGET]\n",
        "y_val = vdf[TARGET]\n",
        "tdf.drop(drop_cols, axis=1, inplace=True)\n",
        "vdf.drop(drop_cols, axis=1, inplace=True)\n",
        "gc.collect()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CMN9axAVHNA5"
      },
      "source": [
        "tdf.fillna(-1, inplace = True)\n",
        "vdf.fillna(-1, inplace = True)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ecaAOhopHOd8"
      },
      "source": [
        "feat_cols = list(tdf.columns)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OxevZxefHPwA"
      },
      "source": [
        "tdf = tdf.to_numpy()\n",
        "vdf = vdf.to_numpy()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gJZ-xyHYHRW-",
        "outputId": "8eec9c55-d392-42ae-c18d-3e618c38b1a4"
      },
      "source": [
        "lgb_train = lgb.Dataset(tdf, y_train)\n",
        "lgb_valid = lgb.Dataset(vdf, y_val)\n",
        "del tdf, y_train\n",
        "del vdf, y_val\n",
        "gc.collect()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VAxDQuCVHSry",
        "outputId": "a514ebff-34ea-4965-c34f-b3d2f1546979"
      },
      "source": [
        "params = {\n",
        "    'objective': 'binary',\n",
        "    'seed': 1103,\n",
        "    'metric': ['auc'],\n",
        "    'max_bin': 255,\n",
        "    'learning_rate': 0.01,\n",
        "    'num_leaves': 900,\n",
        "    'min_data_in_leaf': 255,\n",
        "#     'min_child_weight': 45.98,\n",
        "#     'min_split_gain': 0.00001,\n",
        "#     'lambda_l1':3.791,\n",
        "#     'lambda_l2': 1.288,\n",
        "#     'first_metric_only': True,\n",
        "    'bagging_fraction': 0.7,\n",
        "    'feature_fraction': 0.7,\n",
        "    'device_type': 'gpu',\n",
        "    'gpu_use_dp': True,\n",
        "    'gpu_platform_id': 0,\n",
        "    'gpu_device_id': 0,\n",
        "}\n",
        "\n",
        "model = lgb.train(params, \n",
        "                  lgb_train,\n",
        "                  valid_sets=[lgb_valid],\n",
        "                  verbose_eval=10,\n",
        "                  num_boost_round=10000,\n",
        "                  early_stopping_rounds=20,\n",
        "                  feature_name = feat_cols,\n",
        "                  categorical_feature = cat_cols,\n",
        "                 )"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/lightgbm/basic.py:1555: UserWarning: categorical_feature in Dataset is overridden.\n",
            "New categorical_feature is ['num_tag', 'part', 'prev_cor', 'prev_t1', 'prior_question_had_explanation', 't1']\n",
            "  'New categorical_feature is {}'.format(sorted(list(categorical_feature))))\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "[LightGBM] [Warning] Met negative value in categorical features, will convert it to NaN\n",
            "[LightGBM] [Info] Number of positive: 16414854, number of negative: 8585146\n",
            "[LightGBM] [Info] This is the GPU trainer!!\n",
            "[LightGBM] [Info] Total Bins 5438\n",
            "[LightGBM] [Info] Number of data points in the train set: 25000000, number of used features: 29\n",
            "[LightGBM] [Info] Using requested OpenCL platform 0 device 0\n",
            "[LightGBM] [Info] Using GPU Device: Tesla P100-PCIE-16GB, Vendor: NVIDIA Corporation\n",
            "[LightGBM] [Info] Compiling OpenCL Kernel with 256 bins...\n",
            "[LightGBM] [Info] GPU programs have been built\n",
            "[LightGBM] [Info] Size of histogram bin entry: 16\n",
            "[LightGBM] [Info] 27 dense feature groups (667.57 MB) transferred to GPU in 0.566444 secs. 1 sparse feature groups\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/lightgbm/basic.py:1286: UserWarning: Overriding the parameters from Reference Dataset.\n",
            "  warnings.warn('Overriding the parameters from Reference Dataset.')\n",
            "/usr/local/lib/python3.6/dist-packages/lightgbm/basic.py:1098: UserWarning: categorical_column in param dict is overridden.\n",
            "  warnings.warn('{} in param dict is overridden.'.format(cat_alias))\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.656594 -> initscore=0.648153\n",
            "[LightGBM] [Info] Start training from score 0.648153\n",
            "Training until validation scores don't improve for 20 rounds\n",
            "[10]\tvalid_0's auc: 0.774715\n",
            "[20]\tvalid_0's auc: 0.775223\n",
            "[30]\tvalid_0's auc: 0.775741\n",
            "[40]\tvalid_0's auc: 0.77605\n",
            "[50]\tvalid_0's auc: 0.776235\n",
            "[60]\tvalid_0's auc: 0.776537\n",
            "[70]\tvalid_0's auc: 0.776713\n",
            "[80]\tvalid_0's auc: 0.776915\n",
            "[90]\tvalid_0's auc: 0.777091\n",
            "[100]\tvalid_0's auc: 0.777258\n",
            "[110]\tvalid_0's auc: 0.777502\n",
            "[120]\tvalid_0's auc: 0.777657\n",
            "[130]\tvalid_0's auc: 0.777812\n",
            "[140]\tvalid_0's auc: 0.777975\n",
            "[150]\tvalid_0's auc: 0.778166\n",
            "[160]\tvalid_0's auc: 0.778294\n",
            "[170]\tvalid_0's auc: 0.778496\n",
            "[180]\tvalid_0's auc: 0.778676\n",
            "[190]\tvalid_0's auc: 0.778816\n",
            "[200]\tvalid_0's auc: 0.77897\n",
            "[210]\tvalid_0's auc: 0.779141\n",
            "[220]\tvalid_0's auc: 0.779291\n",
            "[230]\tvalid_0's auc: 0.779451\n",
            "[240]\tvalid_0's auc: 0.77958\n",
            "[250]\tvalid_0's auc: 0.779736\n",
            "[260]\tvalid_0's auc: 0.779889\n",
            "[270]\tvalid_0's auc: 0.780022\n",
            "[280]\tvalid_0's auc: 0.780196\n",
            "[290]\tvalid_0's auc: 0.780331\n",
            "[300]\tvalid_0's auc: 0.780471\n",
            "[310]\tvalid_0's auc: 0.780636\n",
            "[320]\tvalid_0's auc: 0.780789\n",
            "[330]\tvalid_0's auc: 0.780918\n",
            "[340]\tvalid_0's auc: 0.781041\n",
            "[350]\tvalid_0's auc: 0.78118\n",
            "[360]\tvalid_0's auc: 0.781296\n",
            "[370]\tvalid_0's auc: 0.781407\n",
            "[380]\tvalid_0's auc: 0.781537\n",
            "[390]\tvalid_0's auc: 0.781649\n",
            "[400]\tvalid_0's auc: 0.781749\n",
            "[410]\tvalid_0's auc: 0.781849\n",
            "[420]\tvalid_0's auc: 0.781944\n",
            "[430]\tvalid_0's auc: 0.782063\n",
            "[440]\tvalid_0's auc: 0.782171\n",
            "[450]\tvalid_0's auc: 0.782261\n",
            "[460]\tvalid_0's auc: 0.782358\n",
            "[470]\tvalid_0's auc: 0.782452\n",
            "[480]\tvalid_0's auc: 0.782539\n",
            "[490]\tvalid_0's auc: 0.782641\n",
            "[500]\tvalid_0's auc: 0.782724\n",
            "[510]\tvalid_0's auc: 0.782796\n",
            "[520]\tvalid_0's auc: 0.782881\n",
            "[530]\tvalid_0's auc: 0.782971\n",
            "[540]\tvalid_0's auc: 0.783051\n",
            "[550]\tvalid_0's auc: 0.783121\n",
            "[560]\tvalid_0's auc: 0.783197\n",
            "[570]\tvalid_0's auc: 0.783279\n",
            "[580]\tvalid_0's auc: 0.783358\n",
            "[590]\tvalid_0's auc: 0.783431\n",
            "[600]\tvalid_0's auc: 0.783508\n",
            "[610]\tvalid_0's auc: 0.783564\n",
            "[620]\tvalid_0's auc: 0.783629\n",
            "[630]\tvalid_0's auc: 0.783687\n",
            "[640]\tvalid_0's auc: 0.783747\n",
            "[650]\tvalid_0's auc: 0.783813\n",
            "[660]\tvalid_0's auc: 0.783867\n",
            "[670]\tvalid_0's auc: 0.783929\n",
            "[680]\tvalid_0's auc: 0.78399\n",
            "[690]\tvalid_0's auc: 0.784044\n",
            "[700]\tvalid_0's auc: 0.784094\n",
            "[710]\tvalid_0's auc: 0.784141\n",
            "[720]\tvalid_0's auc: 0.784182\n",
            "[730]\tvalid_0's auc: 0.784226\n",
            "[740]\tvalid_0's auc: 0.784276\n",
            "[750]\tvalid_0's auc: 0.784326\n",
            "[760]\tvalid_0's auc: 0.784369\n",
            "[770]\tvalid_0's auc: 0.78441\n",
            "[780]\tvalid_0's auc: 0.784448\n",
            "[790]\tvalid_0's auc: 0.784487\n",
            "[800]\tvalid_0's auc: 0.784525\n",
            "[810]\tvalid_0's auc: 0.784572\n",
            "[820]\tvalid_0's auc: 0.784617\n",
            "[830]\tvalid_0's auc: 0.784657\n",
            "[840]\tvalid_0's auc: 0.784695\n",
            "[850]\tvalid_0's auc: 0.784733\n",
            "[860]\tvalid_0's auc: 0.78477\n",
            "[870]\tvalid_0's auc: 0.784803\n",
            "[880]\tvalid_0's auc: 0.78483\n",
            "[890]\tvalid_0's auc: 0.784864\n",
            "[900]\tvalid_0's auc: 0.784901\n",
            "[910]\tvalid_0's auc: 0.784933\n",
            "[920]\tvalid_0's auc: 0.784964\n",
            "[930]\tvalid_0's auc: 0.78499\n",
            "[940]\tvalid_0's auc: 0.785017\n",
            "[950]\tvalid_0's auc: 0.785049\n",
            "[960]\tvalid_0's auc: 0.785082\n",
            "[970]\tvalid_0's auc: 0.785104\n",
            "[980]\tvalid_0's auc: 0.785134\n",
            "[990]\tvalid_0's auc: 0.785163\n",
            "[1000]\tvalid_0's auc: 0.785189\n",
            "[1010]\tvalid_0's auc: 0.78521\n",
            "[1020]\tvalid_0's auc: 0.785247\n",
            "[1030]\tvalid_0's auc: 0.785269\n",
            "[1040]\tvalid_0's auc: 0.785293\n",
            "[1050]\tvalid_0's auc: 0.78532\n",
            "[1060]\tvalid_0's auc: 0.785351\n",
            "[1070]\tvalid_0's auc: 0.785372\n",
            "[1080]\tvalid_0's auc: 0.785396\n",
            "[1090]\tvalid_0's auc: 0.785419\n",
            "[1100]\tvalid_0's auc: 0.785445\n",
            "[1110]\tvalid_0's auc: 0.785469\n",
            "[1120]\tvalid_0's auc: 0.785496\n",
            "[1130]\tvalid_0's auc: 0.785518\n",
            "[1140]\tvalid_0's auc: 0.785542\n",
            "[1150]\tvalid_0's auc: 0.785564\n",
            "[1160]\tvalid_0's auc: 0.785587\n",
            "[1170]\tvalid_0's auc: 0.785606\n",
            "[1180]\tvalid_0's auc: 0.785633\n",
            "[1190]\tvalid_0's auc: 0.785653\n",
            "[1200]\tvalid_0's auc: 0.785682\n",
            "[1210]\tvalid_0's auc: 0.7857\n",
            "[1220]\tvalid_0's auc: 0.785723\n",
            "[1230]\tvalid_0's auc: 0.785747\n",
            "[1240]\tvalid_0's auc: 0.785764\n",
            "[1250]\tvalid_0's auc: 0.78579\n",
            "[1260]\tvalid_0's auc: 0.785817\n",
            "[1270]\tvalid_0's auc: 0.785835\n",
            "[1280]\tvalid_0's auc: 0.785851\n",
            "[1290]\tvalid_0's auc: 0.78587\n",
            "[1300]\tvalid_0's auc: 0.785884\n",
            "[1310]\tvalid_0's auc: 0.7859\n",
            "[1320]\tvalid_0's auc: 0.785919\n",
            "[1330]\tvalid_0's auc: 0.785942\n",
            "[1340]\tvalid_0's auc: 0.785956\n",
            "[1350]\tvalid_0's auc: 0.785976\n",
            "[1360]\tvalid_0's auc: 0.785993\n",
            "[1370]\tvalid_0's auc: 0.78601\n",
            "[1380]\tvalid_0's auc: 0.786026\n",
            "[1390]\tvalid_0's auc: 0.786046\n",
            "[1400]\tvalid_0's auc: 0.786061\n",
            "[1410]\tvalid_0's auc: 0.786075\n",
            "[1420]\tvalid_0's auc: 0.786091\n",
            "[1430]\tvalid_0's auc: 0.786106\n",
            "[1440]\tvalid_0's auc: 0.786126\n",
            "[1450]\tvalid_0's auc: 0.786141\n",
            "[1460]\tvalid_0's auc: 0.786158\n",
            "[1470]\tvalid_0's auc: 0.786171\n",
            "[1480]\tvalid_0's auc: 0.786179\n",
            "[1490]\tvalid_0's auc: 0.786197\n",
            "[1500]\tvalid_0's auc: 0.786213\n",
            "[1510]\tvalid_0's auc: 0.786223\n",
            "[1520]\tvalid_0's auc: 0.786237\n",
            "[1530]\tvalid_0's auc: 0.786244\n",
            "[1540]\tvalid_0's auc: 0.786258\n",
            "[1550]\tvalid_0's auc: 0.78627\n",
            "[1560]\tvalid_0's auc: 0.786285\n",
            "[1570]\tvalid_0's auc: 0.786294\n",
            "[1580]\tvalid_0's auc: 0.786307\n",
            "[1590]\tvalid_0's auc: 0.786321\n",
            "[1600]\tvalid_0's auc: 0.786331\n",
            "[1610]\tvalid_0's auc: 0.786343\n",
            "[1620]\tvalid_0's auc: 0.786352\n",
            "[1630]\tvalid_0's auc: 0.78636\n",
            "[1640]\tvalid_0's auc: 0.786372\n",
            "[1650]\tvalid_0's auc: 0.786384\n",
            "[1660]\tvalid_0's auc: 0.786397\n",
            "[1670]\tvalid_0's auc: 0.786408\n",
            "[1680]\tvalid_0's auc: 0.786419\n",
            "[1690]\tvalid_0's auc: 0.786428\n",
            "[1700]\tvalid_0's auc: 0.786435\n",
            "[1710]\tvalid_0's auc: 0.786449\n",
            "[1720]\tvalid_0's auc: 0.78646\n",
            "[1730]\tvalid_0's auc: 0.786467\n",
            "[1740]\tvalid_0's auc: 0.786476\n",
            "[1750]\tvalid_0's auc: 0.786487\n",
            "[1760]\tvalid_0's auc: 0.786494\n",
            "[1770]\tvalid_0's auc: 0.786502\n",
            "[1780]\tvalid_0's auc: 0.786508\n",
            "[1790]\tvalid_0's auc: 0.786514\n",
            "[1800]\tvalid_0's auc: 0.786524\n",
            "[1810]\tvalid_0's auc: 0.786531\n",
            "[1820]\tvalid_0's auc: 0.78654\n",
            "[1830]\tvalid_0's auc: 0.786548\n",
            "[1840]\tvalid_0's auc: 0.786556\n",
            "[1850]\tvalid_0's auc: 0.786562\n",
            "[1860]\tvalid_0's auc: 0.786569\n",
            "[1870]\tvalid_0's auc: 0.786577\n",
            "[1880]\tvalid_0's auc: 0.78658\n",
            "[1890]\tvalid_0's auc: 0.78659\n",
            "[1900]\tvalid_0's auc: 0.7866\n",
            "[1910]\tvalid_0's auc: 0.78661\n",
            "[1920]\tvalid_0's auc: 0.786615\n",
            "[1930]\tvalid_0's auc: 0.786622\n",
            "[1940]\tvalid_0's auc: 0.786631\n",
            "[1950]\tvalid_0's auc: 0.786636\n",
            "[1960]\tvalid_0's auc: 0.786643\n",
            "[1970]\tvalid_0's auc: 0.786646\n",
            "[1980]\tvalid_0's auc: 0.786654\n",
            "[1990]\tvalid_0's auc: 0.786662\n",
            "[2000]\tvalid_0's auc: 0.786668\n",
            "[2010]\tvalid_0's auc: 0.786672\n",
            "[2020]\tvalid_0's auc: 0.786675\n",
            "[2030]\tvalid_0's auc: 0.786679\n",
            "[2040]\tvalid_0's auc: 0.786684\n",
            "[2050]\tvalid_0's auc: 0.786692\n",
            "[2060]\tvalid_0's auc: 0.786695\n",
            "[2070]\tvalid_0's auc: 0.786698\n",
            "[2080]\tvalid_0's auc: 0.786707\n",
            "[2090]\tvalid_0's auc: 0.78671\n",
            "[2100]\tvalid_0's auc: 0.786716\n",
            "[2110]\tvalid_0's auc: 0.786722\n",
            "[2120]\tvalid_0's auc: 0.786727\n",
            "[2130]\tvalid_0's auc: 0.786733\n",
            "[2140]\tvalid_0's auc: 0.786734\n",
            "[2150]\tvalid_0's auc: 0.786739\n",
            "[2160]\tvalid_0's auc: 0.786745\n",
            "[2170]\tvalid_0's auc: 0.786751\n",
            "[2180]\tvalid_0's auc: 0.786754\n",
            "[2190]\tvalid_0's auc: 0.786759\n",
            "[2200]\tvalid_0's auc: 0.786763\n",
            "[2210]\tvalid_0's auc: 0.786767\n",
            "[2220]\tvalid_0's auc: 0.786768\n",
            "[2230]\tvalid_0's auc: 0.786773\n",
            "[2240]\tvalid_0's auc: 0.786776\n",
            "[2250]\tvalid_0's auc: 0.786779\n",
            "[2260]\tvalid_0's auc: 0.786782\n",
            "[2270]\tvalid_0's auc: 0.786785\n",
            "[2280]\tvalid_0's auc: 0.786793\n",
            "[2290]\tvalid_0's auc: 0.786797\n",
            "[2300]\tvalid_0's auc: 0.786801\n",
            "[2310]\tvalid_0's auc: 0.786808\n",
            "[2320]\tvalid_0's auc: 0.786811\n",
            "[2330]\tvalid_0's auc: 0.786816\n",
            "[2340]\tvalid_0's auc: 0.786819\n",
            "[2350]\tvalid_0's auc: 0.786824\n",
            "[2360]\tvalid_0's auc: 0.78683\n",
            "[2370]\tvalid_0's auc: 0.786833\n",
            "[2380]\tvalid_0's auc: 0.786836\n",
            "[2390]\tvalid_0's auc: 0.78684\n",
            "[2400]\tvalid_0's auc: 0.786841\n",
            "[2410]\tvalid_0's auc: 0.786844\n",
            "[2420]\tvalid_0's auc: 0.786847\n",
            "[2430]\tvalid_0's auc: 0.786849\n",
            "[2440]\tvalid_0's auc: 0.786852\n",
            "[2450]\tvalid_0's auc: 0.786853\n",
            "[2460]\tvalid_0's auc: 0.786856\n",
            "[2470]\tvalid_0's auc: 0.78686\n",
            "[2480]\tvalid_0's auc: 0.786864\n",
            "[2490]\tvalid_0's auc: 0.786868\n",
            "[2500]\tvalid_0's auc: 0.78687\n",
            "[2510]\tvalid_0's auc: 0.786875\n",
            "[2520]\tvalid_0's auc: 0.786879\n",
            "[2530]\tvalid_0's auc: 0.786883\n",
            "[2540]\tvalid_0's auc: 0.786886\n",
            "[2550]\tvalid_0's auc: 0.786891\n",
            "[2560]\tvalid_0's auc: 0.786893\n",
            "[2570]\tvalid_0's auc: 0.786896\n",
            "[2580]\tvalid_0's auc: 0.786899\n",
            "[2590]\tvalid_0's auc: 0.786904\n",
            "[2600]\tvalid_0's auc: 0.786906\n",
            "[2610]\tvalid_0's auc: 0.786911\n",
            "[2620]\tvalid_0's auc: 0.786914\n",
            "[2630]\tvalid_0's auc: 0.786917\n",
            "[2640]\tvalid_0's auc: 0.78692\n",
            "[2650]\tvalid_0's auc: 0.786924\n",
            "[2660]\tvalid_0's auc: 0.786926\n",
            "[2670]\tvalid_0's auc: 0.786933\n",
            "[2680]\tvalid_0's auc: 0.786936\n",
            "[2690]\tvalid_0's auc: 0.78694\n",
            "[2700]\tvalid_0's auc: 0.786943\n",
            "[2710]\tvalid_0's auc: 0.786945\n",
            "[2720]\tvalid_0's auc: 0.786948\n",
            "[2730]\tvalid_0's auc: 0.786953\n",
            "[2740]\tvalid_0's auc: 0.786956\n",
            "[2750]\tvalid_0's auc: 0.786959\n",
            "[2760]\tvalid_0's auc: 0.786961\n",
            "[2770]\tvalid_0's auc: 0.786964\n",
            "[2780]\tvalid_0's auc: 0.786965\n",
            "[2790]\tvalid_0's auc: 0.786969\n",
            "[2800]\tvalid_0's auc: 0.786971\n",
            "[2810]\tvalid_0's auc: 0.786973\n",
            "[2820]\tvalid_0's auc: 0.786976\n",
            "[2830]\tvalid_0's auc: 0.786978\n",
            "[2840]\tvalid_0's auc: 0.78698\n",
            "[2850]\tvalid_0's auc: 0.786982\n",
            "[2860]\tvalid_0's auc: 0.786984\n",
            "[2870]\tvalid_0's auc: 0.786986\n",
            "[2880]\tvalid_0's auc: 0.786988\n",
            "[2890]\tvalid_0's auc: 0.786993\n",
            "[2900]\tvalid_0's auc: 0.786995\n",
            "[2910]\tvalid_0's auc: 0.786998\n",
            "[2920]\tvalid_0's auc: 0.787\n",
            "[2930]\tvalid_0's auc: 0.787002\n",
            "[2940]\tvalid_0's auc: 0.787005\n",
            "[2950]\tvalid_0's auc: 0.787008\n",
            "[2960]\tvalid_0's auc: 0.78701\n",
            "[2970]\tvalid_0's auc: 0.78701\n",
            "[2980]\tvalid_0's auc: 0.787013\n",
            "[2990]\tvalid_0's auc: 0.787014\n",
            "[3000]\tvalid_0's auc: 0.787016\n",
            "[3010]\tvalid_0's auc: 0.787019\n",
            "[3020]\tvalid_0's auc: 0.787021\n",
            "[3030]\tvalid_0's auc: 0.787026\n",
            "[3040]\tvalid_0's auc: 0.787029\n",
            "[3050]\tvalid_0's auc: 0.787031\n",
            "[3060]\tvalid_0's auc: 0.787033\n",
            "[3070]\tvalid_0's auc: 0.787033\n",
            "[3080]\tvalid_0's auc: 0.787036\n",
            "[3090]\tvalid_0's auc: 0.787037\n",
            "[3100]\tvalid_0's auc: 0.787038\n",
            "[3110]\tvalid_0's auc: 0.787039\n",
            "[3120]\tvalid_0's auc: 0.78704\n",
            "[3130]\tvalid_0's auc: 0.787042\n",
            "[3140]\tvalid_0's auc: 0.787046\n",
            "[3150]\tvalid_0's auc: 0.787049\n",
            "[3160]\tvalid_0's auc: 0.78705\n",
            "[3170]\tvalid_0's auc: 0.787052\n",
            "[3180]\tvalid_0's auc: 0.787054\n",
            "[3190]\tvalid_0's auc: 0.787055\n",
            "[3200]\tvalid_0's auc: 0.787058\n",
            "[3210]\tvalid_0's auc: 0.78706\n",
            "[3220]\tvalid_0's auc: 0.787063\n",
            "[3230]\tvalid_0's auc: 0.787064\n",
            "[3240]\tvalid_0's auc: 0.787065\n",
            "[3250]\tvalid_0's auc: 0.787066\n",
            "[3260]\tvalid_0's auc: 0.787069\n",
            "[3270]\tvalid_0's auc: 0.787071\n",
            "[3280]\tvalid_0's auc: 0.787072\n",
            "[3290]\tvalid_0's auc: 0.787074\n",
            "[3300]\tvalid_0's auc: 0.787077\n",
            "[3310]\tvalid_0's auc: 0.787079\n",
            "[3320]\tvalid_0's auc: 0.787081\n",
            "[3330]\tvalid_0's auc: 0.787083\n",
            "[3340]\tvalid_0's auc: 0.787087\n",
            "[3350]\tvalid_0's auc: 0.787089\n",
            "[3360]\tvalid_0's auc: 0.787091\n",
            "[3370]\tvalid_0's auc: 0.787093\n",
            "[3380]\tvalid_0's auc: 0.787095\n",
            "[3390]\tvalid_0's auc: 0.787096\n",
            "[3400]\tvalid_0's auc: 0.787098\n",
            "[3410]\tvalid_0's auc: 0.7871\n",
            "[3420]\tvalid_0's auc: 0.787101\n",
            "[3430]\tvalid_0's auc: 0.787101\n",
            "[3440]\tvalid_0's auc: 0.787102\n",
            "[3450]\tvalid_0's auc: 0.787104\n",
            "[3460]\tvalid_0's auc: 0.787107\n",
            "[3470]\tvalid_0's auc: 0.787108\n",
            "[3480]\tvalid_0's auc: 0.78711\n",
            "[3490]\tvalid_0's auc: 0.787111\n",
            "[3500]\tvalid_0's auc: 0.787112\n",
            "[3510]\tvalid_0's auc: 0.787113\n",
            "[3520]\tvalid_0's auc: 0.787116\n",
            "[3530]\tvalid_0's auc: 0.787116\n",
            "[3540]\tvalid_0's auc: 0.787118\n",
            "[3550]\tvalid_0's auc: 0.78712\n",
            "[3560]\tvalid_0's auc: 0.78712\n",
            "[3570]\tvalid_0's auc: 0.78712\n",
            "[3580]\tvalid_0's auc: 0.787122\n",
            "[3590]\tvalid_0's auc: 0.787122\n",
            "[3600]\tvalid_0's auc: 0.787124\n",
            "[3610]\tvalid_0's auc: 0.787125\n",
            "[3620]\tvalid_0's auc: 0.787126\n",
            "[3630]\tvalid_0's auc: 0.787127\n",
            "[3640]\tvalid_0's auc: 0.787129\n",
            "[3650]\tvalid_0's auc: 0.787131\n",
            "[3660]\tvalid_0's auc: 0.787132\n",
            "[3670]\tvalid_0's auc: 0.787133\n",
            "[3680]\tvalid_0's auc: 0.787135\n",
            "[3690]\tvalid_0's auc: 0.787135\n",
            "[3700]\tvalid_0's auc: 0.787137\n",
            "[3710]\tvalid_0's auc: 0.787138\n",
            "[3720]\tvalid_0's auc: 0.787139\n",
            "[3730]\tvalid_0's auc: 0.787141\n",
            "[3740]\tvalid_0's auc: 0.787143\n",
            "[3750]\tvalid_0's auc: 0.787146\n",
            "[3760]\tvalid_0's auc: 0.787148\n",
            "[3770]\tvalid_0's auc: 0.78715\n",
            "[3780]\tvalid_0's auc: 0.787152\n",
            "[3790]\tvalid_0's auc: 0.787152\n",
            "[3800]\tvalid_0's auc: 0.787154\n",
            "[3810]\tvalid_0's auc: 0.787156\n",
            "[3820]\tvalid_0's auc: 0.787158\n",
            "[3830]\tvalid_0's auc: 0.787158\n",
            "[3840]\tvalid_0's auc: 0.787161\n",
            "[3850]\tvalid_0's auc: 0.787163\n",
            "[3860]\tvalid_0's auc: 0.787164\n",
            "[3870]\tvalid_0's auc: 0.787167\n",
            "[3880]\tvalid_0's auc: 0.787169\n",
            "[3890]\tvalid_0's auc: 0.787169\n",
            "[3900]\tvalid_0's auc: 0.787171\n",
            "[3910]\tvalid_0's auc: 0.787173\n",
            "[3920]\tvalid_0's auc: 0.787174\n",
            "[3930]\tvalid_0's auc: 0.787175\n",
            "[3940]\tvalid_0's auc: 0.787175\n",
            "[3950]\tvalid_0's auc: 0.787178\n",
            "[3960]\tvalid_0's auc: 0.78718\n",
            "[3970]\tvalid_0's auc: 0.787182\n",
            "[3980]\tvalid_0's auc: 0.787182\n",
            "[3990]\tvalid_0's auc: 0.787184\n",
            "[4000]\tvalid_0's auc: 0.787187\n",
            "[4010]\tvalid_0's auc: 0.787187\n",
            "[4020]\tvalid_0's auc: 0.787188\n",
            "[4030]\tvalid_0's auc: 0.787189\n",
            "[4040]\tvalid_0's auc: 0.787191\n",
            "[4050]\tvalid_0's auc: 0.787192\n",
            "[4060]\tvalid_0's auc: 0.787193\n",
            "[4070]\tvalid_0's auc: 0.787194\n",
            "[4080]\tvalid_0's auc: 0.787196\n",
            "[4090]\tvalid_0's auc: 0.787196\n",
            "[4100]\tvalid_0's auc: 0.787197\n",
            "[4110]\tvalid_0's auc: 0.7872\n",
            "[4120]\tvalid_0's auc: 0.787201\n",
            "[4130]\tvalid_0's auc: 0.787203\n",
            "[4140]\tvalid_0's auc: 0.787203\n",
            "[4150]\tvalid_0's auc: 0.787204\n",
            "[4160]\tvalid_0's auc: 0.787205\n",
            "[4170]\tvalid_0's auc: 0.787205\n",
            "[4180]\tvalid_0's auc: 0.787206\n",
            "[4190]\tvalid_0's auc: 0.787206\n",
            "[4200]\tvalid_0's auc: 0.787207\n",
            "[4210]\tvalid_0's auc: 0.78721\n",
            "[4220]\tvalid_0's auc: 0.787211\n",
            "[4230]\tvalid_0's auc: 0.787214\n",
            "[4240]\tvalid_0's auc: 0.787215\n",
            "[4250]\tvalid_0's auc: 0.787216\n",
            "[4260]\tvalid_0's auc: 0.787217\n",
            "[4270]\tvalid_0's auc: 0.787219\n",
            "[4280]\tvalid_0's auc: 0.787219\n",
            "[4290]\tvalid_0's auc: 0.78722\n",
            "[4300]\tvalid_0's auc: 0.78722\n",
            "[4310]\tvalid_0's auc: 0.787223\n",
            "[4320]\tvalid_0's auc: 0.787223\n",
            "[4330]\tvalid_0's auc: 0.787224\n",
            "[4340]\tvalid_0's auc: 0.787224\n",
            "[4350]\tvalid_0's auc: 0.787225\n",
            "[4360]\tvalid_0's auc: 0.787225\n",
            "[4370]\tvalid_0's auc: 0.787226\n",
            "[4380]\tvalid_0's auc: 0.787226\n",
            "[4390]\tvalid_0's auc: 0.787228\n",
            "[4400]\tvalid_0's auc: 0.787228\n",
            "[4410]\tvalid_0's auc: 0.787228\n",
            "Early stopping, best iteration is:\n",
            "[4395]\tvalid_0's auc: 0.787229\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "V62cKwM3HUcU",
        "outputId": "3449e95e-dae2-458c-812a-e08c3d51e8a8"
      },
      "source": [
        "print('auc:', model.best_score['valid_0']['auc'])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "auc: 0.7872288190560168\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RmRBemOoHWUc",
        "outputId": "8217974d-04c9-426f-9f48-a80c21576549"
      },
      "source": [
        "model.save_model(\"/content/drive/MyDrive/data/lgbm_model_hung_trueskill_mean_sigma_mu.txt\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<lightgbm.basic.Booster at 0x7f7d2fbfa240>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 18
        }
      ]
    }
  ]
}